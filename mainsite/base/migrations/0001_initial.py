# Generated by Django 5.0.4 on 2024-05-22 18:55

import base.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id_user', models.IntegerField(db_column='Id_User', primary_key=True, serialize=False)),
                ('username', models.TextField(db_column='Username', default='', unique=True)),
                ('email', models.TextField(db_column='Email', default='', unique=True)),
                ('password', models.TextField(db_column='Password')),
                ('role', models.SmallIntegerField(db_column='Role', default=1)),
                ('confermed', models.BooleanField(db_column='Confermed', default=False)),
                ('banned', models.BooleanField(db_column='Banned', default=False)),
                ('id_book_read', models.TextField(blank=True, db_column='ID_Book_Read', null=True)),
                ('id_book_readen', models.TextField(blank=True, db_column='ID_Book_Readen', null=True)),
                ('id_book_planning', models.TextField(blank=True, db_column='ID_Book_Planning', null=True)),
                ('id_book_dropped', models.TextField(blank=True, db_column='ID_Book_Dropped', null=True)),
                ('is_active', models.BooleanField(db_column='is_active', default=True)),
                ('is_superuser', models.BooleanField(db_column='is_superuser', default=False)),
                ('is_staff', models.BooleanField(db_column='is_staff', default=False)),
                ('date_joined', models.DateTimeField(db_column='date_joined', default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, db_column='last_login', null=True)),
            ],
            options={
                'db_table': 'User',
                'managed': False,
            },
            managers=[
                ('objects', base.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id_author', models.IntegerField(db_column='ID_Author', primary_key=True, serialize=False)),
                ('author_name', models.TextField(db_column='Author_Name')),
            ],
            options={
                'db_table': 'Author',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id_book', models.IntegerField(db_column='ID_Book', primary_key=True, serialize=False)),
                ('approved', models.BooleanField(db_column='Approved')),
                ('name', models.TextField(db_column='Name')),
                ('rate', models.FloatField(db_column='Rate')),
                ('description', models.TextField(db_column='Description')),
            ],
            options={
                'db_table': 'Book',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'Book_Author',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'Book_Genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BookTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'Book_Tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id_comment', models.IntegerField(db_column='ID_Comment', primary_key=True, serialize=False)),
                ('text_comment', models.TextField(db_column='Text_Comment')),
                ('positive_rate', models.IntegerField(db_column='Positive_rate')),
                ('negative_rate', models.IntegerField(db_column='Negative_rate')),
            ],
            options={
                'db_table': 'Comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id_genre', models.IntegerField(db_column='ID_Genre', primary_key=True, serialize=False)),
                ('genre_name', models.TextField(db_column='Genre_Name')),
            ],
            options={
                'db_table': 'Genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProposeDelete',
            fields=[
                ('id_propose', models.IntegerField(db_column='ID_Propose', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Propose_Delete',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id_tag', models.IntegerField(db_column='ID_Tag', primary_key=True, serialize=False)),
                ('tag_name', models.TextField(db_column='Tag_Name')),
            ],
            options={
                'db_table': 'Tags',
                'managed': False,
            },
        ),
    ]
